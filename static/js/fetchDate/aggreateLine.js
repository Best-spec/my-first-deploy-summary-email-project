// import { line }from './mock.js';
import { getCsrfToken } from './utility.js';
import { renderAutoChart } from '../charts.js';
import { getDateRange1, getDateRange2, set_btn_id } from '../datetime.js';
import { showSuccessToast, showErrorToast, showLoadingToast, hideToast } from '../script.js';

export function dataLineChart() {
  const btn = document.getElementById('btnFetch');
  const mode = document.getElementById('mode');
  const status = document.getElementById('status');
  let controller = null;
  let debounceTimer = null;

  async function doFetch() {
    if (controller) controller.abort();
    controller = new AbortController();

    let loadingToast = showLoadingToast("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô...");
    const payload = {
      period: mode.value,
      mode: 'sum',
      range: getDateRange1(),
    };

    try {
      const res = await fetch('aggregate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': getCsrfToken(),
        },
        credentials: 'include',
        signal: controller.signal,
        body: JSON.stringify(payload)
      });

      if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
      const json = await res.json();

      renderLine(json.primary);
      hideToast(loadingToast);
      showSuccessToast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    } catch (err) {
      hideToast(loadingToast);
      // showErrorToast(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
    } finally {
      controller = null;
    }
  }

  mode.addEventListener('change', () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => doFetch(), 200);
  });

  doFetch(); // üëâ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
}


export async function doFetch() {
  let controller = null
  if (controller) controller.abort(); // cancel previous
  controller = new AbortController();

  let loadingToast = showLoadingToast("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô..."); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á toast ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î

  const payload = {
    period: 'day',
    mode: 'sum',
    range: getDateRange1(),
    // compareRange: getDateRange2()
  };
  payload.period = mode.value;

  try {
    const res = await fetch('aggregate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': getCsrfToken(),
      },
      credentials: 'include',
      signal: controller.signal,
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);

    const json = await res.json();
    console.log(json);

    renderLine(json.primary);
    console.log('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡πâ‡∏ß');

    hideToast(loadingToast);
    showSuccessToast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'); // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
  } catch (err) {
    // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏° catch toast ‡∏î‡πâ‡∏ß‡∏¢
    showErrorToast(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
  } finally {
    controller = null;
  }
}

function renderLine(data) {
  renderAutoChart(data, {
    canvasId: 'line-chart-canvas',
    typeColors: 'by-type',
    chartType: 'line',       // üìå ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
    colorMode: 'dataset',    // ‡∏™‡∏µ‡∏ï‡∏≤‡∏° dataset
    yScale: 'logarithmic',        // ‡πÅ‡∏Å‡∏ô Y ‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á

    // ‚úÖ ‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢
    datasetStyle: {
      borderWidth: 3,        // ‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏ô‡∏≤
      tension: 0.45,         // ‡πÇ‡∏Ñ‡πâ‡∏á‡∏ô‡∏∏‡πà‡∏°
      fill: true,            // ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô
      backgroundOpacity: 0.18,
      pointRadius: 5,        // ‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
      pointHoverRadius: 8
    },
    useGradient: true,       // ‚úÖ ‡πÑ‡∏•‡πà‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô

    // ‚úÖ ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô‡∏à‡∏∏‡∏î
    showValueLabels: true,
    valueLabelOptions: {
      align: 'top',
      fontSize: 14,          // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
      fontWeight: '600',
      color: '#000'
    }
  });
}

