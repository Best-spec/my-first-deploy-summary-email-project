// import { line }from './mock.js';
import { getCsrfToken } from './utility.js';
import { renderAutoChart } from '../charts.js';
import { getDateRange1, getDateRange2, set_btn_id } from '../datetime.js';
import { showSuccessToast, showErrorToast, showLoadingToast, hideToast } from '../script.js';
import { data_compare } from './mock.js';


//‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡πÄ‡∏õ‡∏•‡∏∑‡πà‡∏¢‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
// export function dataLineChart() {
//   const btn = document.getElementById('btnFetch');
//   const mode = document.getElementById('mode');
//   const status = document.getElementById('status');
//   let controller = null;
//   let debounceTimer = null;
  
//   const date1 = getDateRange1();
//   const date2 = getDateRange2();
  
//   const datetimeset = date2 === null ? [date1] : [date1, date2];
//   const isCompareDateSelected = date2 !== null; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

//   async function doFetch() {
//     if (controller) controller.abort();
//     controller = new AbortController();

//     let loadingToast = showLoadingToast("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô...");
//     const payload = {
//       period: mode.value,
//       mode: 'sum',
//       range: getDateRange1(),
//     };

//     try {
//       const res = await fetch('aggregate', {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//           'X-CSRFToken': getCsrfToken(),
//         },
//         credentials: 'include',
//         signal: controller.signal,
//         body: JSON.stringify(payload)
//       });

//       if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
//       const json = await res.json();

//       if (isCompareDateSelected) {
//         console.log('compare', [date1, date2])
//         renderLine(data_compare);
//       } else {
//         console.log('not compare', date1)
//         renderLine(json.primary);
//       }
//       console.log("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô data:", json.primary.length);
//       hideToast(loadingToast);
//       showSuccessToast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
//     } catch (err) {
//       hideToast(loadingToast);
//       // showErrorToast(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
//     } finally {
//       controller = null;
//     }
//   }

//   mode.addEventListener('change', () => {
//     clearTimeout(debounceTimer);
//     debounceTimer = setTimeout(() => doFetch(), 200);
//   });

//   doFetch(); // üëâ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
// }


export async function doFetch() {
  let controller = null
  if (controller) controller.abort(); // cancel previous
  controller = new AbortController();

  let loadingToast = showLoadingToast("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô..."); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á toast ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î

  const payload = {
    period: 'day',
    mode: 'sum',
    range: getDateRange1(),
    // compareRange: getDateRange2()
  };
  payload.period = mode.value;

  const date1 = getDateRange1();
  const date2 = getDateRange2();
  
  const datetimeset = date2 === null ? [date1] : [date1, date2];
  const isCompareDateSelected = date2 !== null; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

  try {
    const res = await fetch('aggregate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': getCsrfToken(),
      },
      credentials: 'include',
      signal: controller.signal,
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);

    const json = await res.json();
    console.log(json);

      if (isCompareDateSelected) {
        console.log('compare', [date1, date2])
        renderLine(data_compare);
      } else {
        console.log('not compare', date1)
        renderLine(json.primary);
      }
    renderLine(json.primary);
    // renderLine(data_compare);
    console.log("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô data:", json.primary.length);
    console.log('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡πâ‡∏ß');

    hideToast(loadingToast);
    showSuccessToast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'); // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
  } catch (err) {
    // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏° catch toast ‡∏î‡πâ‡∏ß‡∏¢
    showErrorToast(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
  } finally {
    controller = null;
  }
}

// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
export function dataLineChart() {
  const btn = document.getElementById('btnFetch');
  const mode = document.getElementById('mode');
  let controller = null;
  let debounceTimer = null;

  async function doFetch() {
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (controller) controller.abort();
    controller = new AbortController();

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô)
    const date1 = getDateRange1();                       // {startDate, endDate}
    const date2 = getDateRange2();                       // null ‡∏´‡∏£‡∏∑‡∏≠ {startDate, endDate}
    const hasCompare = !!(date2 && date2.startDate && date2.endDate);

    const loadingToast = showLoadingToast("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô...");

    // ‚úÖ ‡πÅ‡∏ô‡∏ö compareRange ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    const payload = {
      period: (mode?.value) || 'day',
      mode: 'sum',
      range: date1,
      ...(hasCompare ? { compareRange: date2 } : {})
    };

    try {
      const res = await fetch('aggregate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': getCsrfToken(),
        },
        credentials: 'include',
        signal: controller.signal,
        body: JSON.stringify(payload)
      });

      if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);

      const json = await res.json();
      // üëá ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥ backend ‡∏Ñ‡∏∑‡∏ô { primary: [...], compare: [...] } ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ô‡∏ö compareRange ‡πÑ‡∏õ
      if (hasCompare && Array.isArray(json.compare)) {
        console.log('compare', date1, date2);
        renderLine(json.compare);
      } else {
        console.log('not compare', date1);
        renderLine(json.primary);
      }

      console.log("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô primary:", Array.isArray(json.primary) ? json.primary.length : 0);
      hideToast(loadingToast);
      showSuccessToast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    } catch (err) {
      hideToast(loadingToast);
      showErrorToast(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
    } finally {
      controller = null;
    }
  }

  // ‡πÄ‡∏î‡πâ‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô period
  mode?.addEventListener('change', () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(doFetch, 200);
  });

  // ‡πÄ‡∏î‡πâ‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  btn?.addEventListener('click', () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(doFetch, 200);
  });

  // üëâ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡∏ï‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏à
  doFetch();
}


function renderLine(data) {
  renderAutoChart(data, {
    canvasId: 'line-chart-canvas',
    typeColors: 'by-type',
    chartType: 'line',
    colorMode: 'dataset',
    yScale: 'logarithmic', // (‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏∑‡∏≠ log)

    // ‚úÖ ‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡πÑ‡∏î‡πâ)
    twinMap: {
      "Appointment": "Appointment_compare",
      "General Inquiry": "General Inquiry compare", 
      "Estimated Cost": "Estimated Cost_compare", 
      "Other": "Other_compare", 
      "Contact Doctor": "Contact Doctor_compare",
      "Package Inquiry": "Package Inquiry_compare",
      "Feedback & Suggestion": "Feedback & Suggestion_compare",
      "Appointment": "Appointment_compare", 
      "Appointment Recommended": "Appointment Recommended_compare" 
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°:
      // "General Inquiry": ["General Inquiry target", "General Inquiry prev"]
    },

    twinOptions: {
      sameColor: true,              // twin ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
      labelSuffix: ' (recommended)',// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ suffix ‡∏ô‡∏µ‡πâ
      style: {
        borderDash: [6, 4],         // ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡πÉ‡∏´‡πâ twin
        borderWidth: 2,
        pointRadius: 3,
        pointHoverRadius: 5,
        fill: false,                // twin ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á fill
        backgroundOpacity: 0.12
      },
      // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢ key (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ twin)
      labelSuffixByName: {
        "Appointment Recommended": " (recommended)"
      }
    },

    // ‚úÖ ‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢ (‡∏Ñ‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
    datasetStyle: {
      borderWidth: 3,
      tension: 0.45,
      fill: true,
      backgroundOpacity: 0.18,
      pointRadius: 5,
      pointHoverRadius: 8
    },
    useGradient: true,

    // ‚úÖ ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô‡∏à‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡πà‡∏ô ‡∏≠‡∏≤‡∏à‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô false ‡∏Å‡∏±‡∏ô‡∏£‡∏Å)
    showValueLabels: true,
    valueLabelOptions: {
      align: 'top',
      fontSize: 14,
      fontWeight: '600',
      color: '#000'
    }
  });
}


// function renderLine(data) {
//   renderAutoChart(data, {
//     canvasId: 'line-chart-canvas',
//     typeColors: 'by-type',
//     chartType: 'line',       // üìå ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
//     colorMode: 'dataset',    // ‡∏™‡∏µ‡∏ï‡∏≤‡∏° dataset
//     yScale: 'logarithmic',        // ‡πÅ‡∏Å‡∏ô Y ‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á

//     // ‚úÖ ‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢
//     datasetStyle: {
//       borderWidth: 3,        // ‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏ô‡∏≤
//       tension: 0.45,         // ‡πÇ‡∏Ñ‡πâ‡∏á‡∏ô‡∏∏‡πà‡∏°
//       fill: true,            // ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô
//       backgroundOpacity: 0.18,
//       pointRadius: 5,        // ‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
//       pointHoverRadius: 8
//     },
//     useGradient: true,       // ‚úÖ ‡πÑ‡∏•‡πà‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô

//     // ‚úÖ ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô‡∏à‡∏∏‡∏î
//     showValueLabels: true,
//     valueLabelOptions: {
//       align: 'top',
//       fontSize: 14,          // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
//       fontWeight: '600',
//       color: '#000'
//     }
//   });
// }

